// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zemu.proto

package ledger_go

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExchangeRequest struct {
	Command []byte `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (m *ExchangeRequest) Reset()         { *m = ExchangeRequest{} }
func (m *ExchangeRequest) String() string { return proto.CompactTextString(m) }
func (*ExchangeRequest) ProtoMessage()    {}
func (*ExchangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4217efc5d72909, []int{0}
}
func (m *ExchangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeRequest.Merge(m, src)
}
func (m *ExchangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeRequest proto.InternalMessageInfo

func (m *ExchangeRequest) GetCommand() []byte {
	if m != nil {
		return m.Command
	}
	return nil
}

type ExchangeReply struct {
	Reply []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (m *ExchangeReply) Reset()         { *m = ExchangeReply{} }
func (m *ExchangeReply) String() string { return proto.CompactTextString(m) }
func (*ExchangeReply) ProtoMessage()    {}
func (*ExchangeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4217efc5d72909, []int{1}
}
func (m *ExchangeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeReply.Merge(m, src)
}
func (m *ExchangeReply) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeReply proto.InternalMessageInfo

func (m *ExchangeReply) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func init() {
	proto.RegisterType((*ExchangeRequest)(nil), "ledger_go.ExchangeRequest")
	proto.RegisterType((*ExchangeReply)(nil), "ledger_go.ExchangeReply")
}

func init() { proto.RegisterFile("zemu.proto", fileDescriptor_1e4217efc5d72909) }

var fileDescriptor_1e4217efc5d72909 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xaa, 0x4a, 0xcd, 0x2d,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcc, 0x49, 0x4d, 0x49, 0x4f, 0x2d, 0x8a, 0x4f,
	0xcf, 0x57, 0xd2, 0xe6, 0xe2, 0x77, 0xad, 0x48, 0xce, 0x48, 0xcc, 0x4b, 0x4f, 0x0d, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62, 0x4f, 0xce, 0xcf, 0xcd, 0x4d, 0xcc, 0x4b, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0x71, 0x95, 0x54, 0xb9, 0x78, 0x11, 0x8a, 0x0b, 0x72,
	0x2a, 0x85, 0x44, 0xb8, 0x58, 0x8b, 0x40, 0x0c, 0xa8, 0x42, 0x08, 0xc7, 0x28, 0x90, 0x8b, 0x3b,
	0x2a, 0x35, 0xb7, 0xd4, 0x19, 0xa2, 0x4b, 0xc8, 0x89, 0x8b, 0x03, 0xa6, 0x4b, 0x48, 0x4a, 0x0f,
	0x6e, 0xb5, 0x1e, 0x9a, 0xbd, 0x52, 0x12, 0x58, 0xe5, 0x0a, 0x72, 0x2a, 0x95, 0x18, 0x9c, 0x24,
	0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5,
	0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x89, 0x0d, 0xec, 0x25, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x3b, 0x53, 0xa0, 0xe0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ZemuCommandClient is the client API for ZemuCommand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZemuCommandClient interface {
	Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeReply, error)
}

type zemuCommandClient struct {
	cc grpc1.ClientConn
}

func NewZemuCommandClient(cc grpc1.ClientConn) ZemuCommandClient {
	return &zemuCommandClient{cc}
}

func (c *zemuCommandClient) Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeReply, error) {
	out := new(ExchangeReply)
	err := c.cc.Invoke(ctx, "/ledger_go.ZemuCommand/Exchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZemuCommandServer is the server API for ZemuCommand service.
type ZemuCommandServer interface {
	Exchange(context.Context, *ExchangeRequest) (*ExchangeReply, error)
}

// UnimplementedZemuCommandServer can be embedded to have forward compatible implementations.
type UnimplementedZemuCommandServer struct {
}

func (*UnimplementedZemuCommandServer) Exchange(ctx context.Context, req *ExchangeRequest) (*ExchangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}

func RegisterZemuCommandServer(s grpc1.Server, srv ZemuCommandServer) {
	s.RegisterService(&_ZemuCommand_serviceDesc, srv)
}

func _ZemuCommand_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZemuCommandServer).Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger_go.ZemuCommand/Exchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZemuCommandServer).Exchange(ctx, req.(*ExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZemuCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ledger_go.ZemuCommand",
	HandlerType: (*ZemuCommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exchange",
			Handler:    _ZemuCommand_Exchange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zemu.proto",
}

func (m *ExchangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintZemu(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		i -= len(m.Reply)
		copy(dAtA[i:], m.Reply)
		i = encodeVarintZemu(dAtA, i, uint64(len(m.Reply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintZemu(dAtA []byte, offset int, v uint64) int {
	offset -= sovZemu(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExchangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovZemu(uint64(l))
	}
	return n
}

func (m *ExchangeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovZemu(uint64(l))
	}
	return n
}

func sovZemu(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZemu(x uint64) (n int) {
	return sovZemu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExchangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZemu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZemu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZemu
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZemu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = append(m.Command[:0], dAtA[iNdEx:postIndex]...)
			if m.Command == nil {
				m.Command = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZemu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZemu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZemu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZemu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZemu
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZemu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZemu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZemu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZemu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZemu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZemu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZemu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZemu
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZemu
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZemu
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZemu        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZemu          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZemu = fmt.Errorf("proto: unexpected end of group")
)
